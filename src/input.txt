class proyecto1 {
	// declarar variable dos veces en el mismo ambito
	//int global1;
	int global1;
	int compare1;
	int compare2;
	
	
	void antesDeclarada(){
		// Variable antes de ser declarada
		int a;
		a = 10; 
		
	}
	
	// Declarar un arreglo tamaÃ±o 0
	int lista[0];
	
	// Prueba de los parametros de un metodo y su llamada
	char parametrosPrueba (int param1, int param2){
		return 'a' ;
	}
	int usarParametros(){
		int a;
		int b;
		char c ;
		char d;
		// Cantidad parametros
		//parametrosPrueba(b) ;

		// Otro tipo	
		 //parametrosPrueba(b,c) ;
		
		// Correcto
		parametrosPrueba(a,b) ;
		return a;
	}
	// Usar expression --> methodCall debe devolver algo
	void exprMethod (){
		int a[10];
		// En id [ expression ]
		//a[antesDeclarada()] = 20;
		
		// En while ( expression )
		//while (antesDeclarada()){
		//	a[1] = 2 ;
		//}
	}

	// Si es void el metodo el return debe estar vacio
	void pruebaVoid(){
		int var;
		//return var;
		return ; 
	}

	// El return debe ser del mismo tipo que el metodo
	char pruebaTipo (){
		char prueba ;
		int prueba2 ;
		//return prueba2; //cambiar esto
		return prueba ;
	}

	// Si se usa id [ expr ], id debe ser lista y expr debe ser int
	void pruebaVarList(){
		char noLista;
		char lista[20];
		//Cambiar esto (ya no :D)
		 //lista = 'b' ; 
		//noLista[10] = 'a' ;	
		lista[1] = 'c' ;	
	}

	// Se prueba que expr en if y while sea boolean
	boolean pruebaBoolean(){
		int a;
		char b ;
//		if ( a ) {
//			return false; 
//		}
//		while ( b ) {
//			return false; 
//		}
		return true;
	}

	// Arith_op y rel_op solo usan ints
	void arithRel(){
		int a;
		boolean b;
		// Arith_op
		//a = 8 + 'b' ;
		//a = 8 * true ;

		// rel_op
		 //b = 8 < false;
	}

	// Tipos de eq_ops debe ser int, char o booleans
	void eqOps(){
		boolean eq;
		 //eq = 9 != false ;		 
		//eq = 8 == 'a' ;
		eq = 1 != 0 ;
		eq = true == false; 
		eq = 'a' == 'a' ;
	}

	// Cond_ops y ! debe ser boolean
	void condOps(){
		boolean some;
		 some = 8+1 || 10 ;
		 some = 'b' && 'a' ;
		 some = true || 10 ;
		 some = ! 10;
	}

	// La asignacion debe ser del mismo tipo que la variable
	void assign(){
		 int a;
		 char b;
		 boolean c;
		 int d;
		 int f;
		 a = usarParametros();
		 a = c ; 
		 b = a;
		 b = c;
		 c = a ;
		 c = b ;
		d = a;
		f = d;
	}
	//probar operaciones aritmeticas
	void testOps(){
		int op1;
		int op2;
		int res;
		op2 = 4;
		res = 1+2;
		res = 3*12;
		res = 1+2*4;
		//debe fallar
		res = op2-1;		
		res = 2%1;
		
	

	}

	void testCasteo(){
		int num1;
		char num2;
		
		//castear char a int
		num1 = (int)num2;
		

	}
	//probar structs
	struct a {
		int asf;
		char LOL;
		int array[10];
	}

	// main necesario
	void main(){}
}





